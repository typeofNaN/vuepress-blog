import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as i,d as n,f as s,b as p,e as a}from"./app-e8e12cd6.js";const u="/vuepress-blog/assets/p1-943d673e.png",r="/vuepress-blog/assets/p2-c6de2ba0.png",k="/vuepress-blog/assets/p3-f8998bcf.png",d="/vuepress-blog/assets/p4-65f5e789.png",v="/vuepress-blog/assets/p5-b60c22d5.png",m="/vuepress-blog/assets/p6-21aa6a38.png",b="/vuepress-blog/assets/p7-d5094674.png",g="/vuepress-blog/assets/p8-0ea6d0b4.png",y="/vuepress-blog/assets/p9-e27e6754.png",w="/vuepress-blog/assets/p10-22c85b06.png",h="/vuepress-blog/assets/p11-c82c3b40.png",f="/vuepress-blog/assets/p12-d9f8577b.png",x={},C=n("p",null,"最近在工作室课上在讲 .NET 程序开发应该掌握的各种设计模式，恰巧看到设计模式中的原型模式与 JavaScript 中的继承机制——原型链有异曲同工之妙，便深入研究了一下。",-1),q=n("p",null,"在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过 clone 的方法创建一个对象，然后由工厂方法提供给调用者。",-1),_=n("p",null,"现将本人学习心得分享与此以方便大家更好地学习掌握原型模式。",-1),D=a(`<h2 id="问题引入" tabindex="-1"><a class="header-anchor" href="#问题引入" aria-hidden="true">#</a> 问题引入</h2><p>当运行以下代码时，会产生什么样的结果呢？</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>答案是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再运行以下代码时，又会产生什么样的结果呢？</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">Person</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Jack&quot;</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Person</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>
b<span class="token punctuation">.</span><span class="token function">SetInfo</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// a显示的信息是什么？</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>答案是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>John 21
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上两段代码结构相似，但为何会产生不同的结果呢？</p><h2 id="为什么" tabindex="-1"><a class="header-anchor" href="#为什么" aria-hidden="true">#</a> 为什么</h2><p>要明白这个问题，我们先得对 C# 的数据类型有一定的了解。</p><p>C# 的数据项类型一共分为以下几种：</p><ul><li>值类型（Value types）</li><li>引用类型（Reference types）</li><li>指针类型（Pointer types）(此处不做讨论)</li></ul><p>而 string 类型是一种具有值类型特性的特殊引用类型,并不是基本数据类型（底下有关于 string 的详细介绍）。值类型和引用类型的区别看下表：</p><table><thead><tr><th></th><th>值类型</th><th>引用类型</th></tr></thead><tbody><tr><td>内存分配地点</td><td>分配在栈中</td><td>分配在堆中</td></tr><tr><td>效率</td><td>效率高，不需要地址转换</td><td>效率低，需要进行地址转换</td></tr><tr><td>内存回收</td><td>使用完后，立即回收</td><td>垃圾回收机制</td></tr><tr><td>赋值操作</td><td>进行复制，创建一个同值新对象</td><td>只是对原有对象的引用</td></tr><tr><td>函数参数和返回值</td><td>是对象的复制</td><td>是原有对象的引用</td></tr></tbody></table><p>通过以下图片我们可以看到对象的值的传递情况</p><figure><img src="`+u+'" alt="对象的值的传递" tabindex="0"><figcaption>对象的值的传递</figcaption></figure><figure><img src="'+r+'" alt="对象的值的传递" tabindex="0"><figcaption>对象的值的传递</figcaption></figure><p>Person b = a 后，即将 a 的值赋值给了 b ，此时 a 和 b 都同时指向同一个堆里，b.SetInfo(&quot;John&quot;,21) 即改变了堆里的值，而 a 的值仍然是从堆里获取，所以 a.Display() 的值为 John 21。</p><p>但如何实现如下面两张图一样的数据传递呢？</p><figure><img src="'+k+'" alt="对象的值的传递" tabindex="0"><figcaption>对象的值的传递</figcaption></figure><figure><img src="'+d+'" alt="对象的值的传递" tabindex="0"><figcaption>对象的值的传递</figcaption></figure><p>原型模式告诉你答案！！！</p><h2 id="原型模式" tabindex="-1"><a class="header-anchor" href="#原型模式" aria-hidden="true">#</a> 原型模式</h2><h3 id="原型模式介绍" tabindex="-1"><a class="header-anchor" href="#原型模式介绍" aria-hidden="true">#</a> 原型模式介绍</h3><p>维基百科：原型模式（Prototype Pattern）是创建型模式的一种，其特点在于通过「复制」一个已经存在的实例来返回新的实例，而不是新建实例。被复制的实例就是我们所称的「原型」（Prototype），这个原型是可定制的。</p><h3 id="原型模式的uml类图" tabindex="-1"><a class="header-anchor" href="#原型模式的uml类图" aria-hidden="true">#</a> 原型模式的UML类图</h3><figure><img src="'+v+`" alt="原型模式的UML类图" tabindex="0"><figcaption>原型模式的UML类图</figcaption></figure><h3 id="原型模式的简单实现" tabindex="-1"><a class="header-anchor" href="#原型模式的简单实现" aria-hidden="true">#</a> 原型模式的简单实现</h3><p>申明抽象原型类和具体原型类：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// 抽象原型类:声明克隆自身的接口</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Prototype</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name">Prototype</span> <span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体原型类:实现克隆的具体操作</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcretePrototype1</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Prototype</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Prototype</span> <span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;ConcretePrototype1 Cloned!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>Prototype<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">MemberwiseClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcretePrototype2</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Prototype</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Prototype</span> <span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;ConcretePrototype2 Cloned!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>Prototype<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">MemberwiseClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主程序调用：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// 客户类:让一个原型克隆自身，从而获得一个新的对象</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">ConcretePrototype1</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConcretePrototype1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ConcretePrototype1</span> obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConcretePrototype2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ConcretePrototype1</span> cloneObj1 <span class="token operator">=</span> <span class="token punctuation">(</span>ConcretePrototype1<span class="token punctuation">)</span>obj1<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ConcretePrototype1</span> cloneObj2 <span class="token operator">=</span> <span class="token punctuation">(</span>ConcretePrototype2<span class="token punctuation">)</span>obj2<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序运行结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ConcretePrototype1 Cloned!
ConcretePrototype2 Cloned!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="简历的原型实现" tabindex="-1"><a class="header-anchor" href="#简历的原型实现" aria-hidden="true">#</a> 简历的原型实现</h3><p>简历类：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// 简历</span>
<span class="token keyword">class</span> <span class="token class-name">Resume</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICloneable</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> sex<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> timeArea<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> company<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Resume</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 设置个人信息</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetPersonalInfo</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sex<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> age<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 设置工作经历</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> timeArea<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> company<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>timeArea <span class="token operator">=</span> timeArea<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>company <span class="token operator">=</span> company<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 显示</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;{0} {1} {2}&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;工作经历：{0} {1}&quot;</span><span class="token punctuation">,</span> timeArea<span class="token punctuation">,</span> company<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">Object</span> <span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>Object<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">MemberwiseClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端调用代码：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Resume</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Resume</span><span class="token punctuation">(</span><span class="token string">&quot;大鸟&quot;</span><span class="token punctuation">)</span>；
    a<span class="token punctuation">.</span><span class="token function">SetPersonalInfo</span><span class="token punctuation">(</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;29&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    a<span class="token punctuation">.</span><span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token string">&quot;1998-2000&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;XX公司&quot;</span><span class="token punctuation">)</span>

    <span class="token class-name">Resume</span> b <span class="token operator">=</span> （Resume）a<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    b<span class="token punctuation">.</span><span class="token function">setWorkExperience</span><span class="token punctuation">(</span><span class="token string">&quot;1998-2006&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;YY企业&quot;</span><span class="token punctuation">)</span>

    <span class="token class-name">Resume</span> c <span class="token operator">=</span> （Resume）a<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    c<span class="token punctuation">.</span><span class="token function">SetPersonalInfo</span><span class="token punctuation">(</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;24&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    a<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    b<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    c<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果显示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>大鸟 男 29
工作经历  1998-2000  XX公司
大鸟 男 29
工作经历  1998-2006  YY公司
大鸟 男 24
工作经历  1998-2000  XX公司
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现icloneable接口" tabindex="-1"><a class="header-anchor" href="#实现icloneable接口" aria-hidden="true">#</a> 实现ICloneable接口</h3><p>.NET 在 System 命名空间中提供了 ICloneable 接口，其中只包含一个 Clone() 方法，实现了这个接口就是完成了原型模式。</p><figure><img src="`+m+'" alt="实现ICloneable接口" tabindex="0"><figcaption>实现ICloneable接口</figcaption></figure><h2 id="浅拷贝与深拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝与深拷贝" aria-hidden="true">#</a> 浅拷贝与深拷贝</h2><p>注：string 是一种拥有值类型特点的特殊引用类型！（例：上面简历的原型实现代码）</p><ul><li>string 不是基本数据类型，而是一个类（class）</li><li>class string 继承自对象 （object），而不是 System.ValueType ( Int32 这样的则是继承于 System.ValueType)</li><li>string 本质上是个 char[]，而 Array 是引用类型，并且初始化时也是在托管堆分配内存的，但是这个特殊的类却表现出值类型的特点，微软设计这个类的时候为了方便操作，所以重写了 == 和 != 操作符以及 Equals 方法，它判断相等性时，是按照内容来判断的，而不是地址</li><li>string 在栈上保持引用，在堆上保持数据</li></ul><h3 id="浅拷贝-shallow-copy" tabindex="-1"><a class="header-anchor" href="#浅拷贝-shallow-copy" aria-hidden="true">#</a> 浅拷贝（Shallow Copy）</h3>',50),P=n("li",null,"只复制对象的值类型字段，引用类型只复制引用不复制引用的对象（即复制地址）",-1),M={href:"https://docs.microsoft.com/zh-cn/dotnet/api/system.object.memberwiseclone?view=netframework-4.7.1#System_Object_MemberwiseClone",target:"_blank",rel:"noopener noreferrer"},j=a('<figure><img src="'+b+`" alt="浅拷贝" tabindex="0"><figcaption>浅拷贝</figcaption></figure><h4 id="浅拷贝引用类型会出现的错误" tabindex="-1"><a class="header-anchor" href="#浅拷贝引用类型会出现的错误" aria-hidden="true">#</a> 浅拷贝引用类型会出现的错误</h4><p>工作经历类</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">WorkExperience</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> workDate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> WorkDate
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> workDate<span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">set</span> <span class="token punctuation">{</span> workDate <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> company<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Company
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> company<span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">set</span> <span class="token punctuation">{</span> company <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简历类</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// 简历</span>
<span class="token keyword">class</span> <span class="token class-name">Resume</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">ICloneable</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> sex<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> age<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">WorkExperience</span> work<span class="token punctuation">;</span>    <span class="token comment">// 引用&quot;工作经历&quot;对象</span>

    <span class="token keyword">public</span> <span class="token function">Resume</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        work <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WorkExperience</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 在“简历”类实例化时同时实例化“工作经历”</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 设置个人信息</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetPersonalInfo</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sex<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> age<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 设置工作经历</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token keyword">string</span> workDate，<span class="token class-name"><span class="token keyword">string</span></span> company<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        work<span class="token punctuation">.</span>WorkDate <span class="token operator">=</span> workDate<span class="token punctuation">;</span>
        work<span class="token punctuation">.</span>Company <span class="token operator">=</span> company<span class="token punctuation">;</span>    <span class="token comment">// 调用此方法时，给对象的两属性赋值</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 显示</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;{0} {1} {2}&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;工作经历: {0} {1}&quot;</span><span class="token punctuation">,</span> work<span class="token punctuation">.</span>WorkDate<span class="token punctuation">,</span> work<span class="token punctuation">.</span>Company<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">Object</span> <span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>Object<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">MemberwiseClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端调用代码</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Resume</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Resume</span><span class="token punctuation">(</span><span class="token string">&quot;大鸟&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    a<span class="token punctuation">.</span><span class="token function">SetPersonalInfo</span><span class="token punctuation">(</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;29&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    a<span class="token punctuation">.</span><span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token string">&quot;1998-2000&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;XX公司&quot;</span><span class="token punctuation">)</span>

    <span class="token class-name">Resume</span> b <span class="token operator">=</span> （Resume）a<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    b<span class="token punctuation">.</span><span class="token function">setWorkExperience</span><span class="token punctuation">(</span><span class="token string">&quot;1998-2006&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;YY企业&quot;</span><span class="token punctuation">)</span>

    <span class="token class-name">Resume</span> c <span class="token operator">=</span> （Resume）a<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    c<span class="token punctuation">.</span><span class="token function">SetPersonalInfo</span><span class="token punctuation">(</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;24&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    c<span class="token punctuation">.</span><span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token string">&quot;1998-2003&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ZZ企业&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    a<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    b<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    c<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果显示</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>大鸟 男 29
工作经历  1998-2003  ZZ公司
大鸟 男 29
工作经历  1998-2003  ZZ公司
大鸟 男 24
工作经历  1998-2003  ZZ公司
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从结果显示我们可以看到，由于浅复制是浅表复制，所以对于值类型，没什么问题（如 c.Display()）；对于引用类型，只是复制了引用，引用的对象还是指向原来的对象，所以给 a, b, c 三个引用设置‘工作经历’，却同时看到三个引用都是最后一次设置，因为三个引用都指向了同一个对象。</p><h3 id="深拷贝-deep-copy" tabindex="-1"><a class="header-anchor" href="#深拷贝-deep-copy" aria-hidden="true">#</a> 深拷贝（Deep Copy）</h3><ul><li>不仅复制值类型字段，而且复制引用的对象</li><li>把引用对象的变量指向复制过的新对象，而不是原有的被引用对象</li></ul><figure><img src="`+g+'" alt="深拷贝" tabindex="0"><figcaption>深拷贝</figcaption></figure><h4 id="实现深拷贝" tabindex="-1"><a class="header-anchor" href="#实现深拷贝" aria-hidden="true">#</a> 实现深拷贝</h4><figure><img src="'+y+`" alt="实现深拷贝" tabindex="0"><figcaption>实现深拷贝</figcaption></figure><p>简历和工作经历类：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// 简历</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Resume</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICloneable</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token class-name">WorkExperience</span> work<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> workDate<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> company<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        work<span class="token punctuation">.</span>WorkDate <span class="token operator">=</span> workDate<span class="token punctuation">;</span>
        work<span class="token punctuation">.</span>Company <span class="token operator">=</span> company<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>
            <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"> Name </span><span class="token punctuation">}</span></span><span class="token string"> Worded in </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"> work<span class="token punctuation">.</span>Company </span><span class="token punctuation">}</span></span><span class="token string"> from </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"> work<span class="token punctuation">.</span>WorkDate </span><span class="token punctuation">}</span></span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">Resume</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        work <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WorkExperience</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 调用私有的构造方法，让“工作经历”克隆完成，最终返回一个深复制的简历对象</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Resume</span> cloned <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Resume</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cloned<span class="token punctuation">.</span>work <span class="token operator">=</span> <span class="token punctuation">(</span>WorkExperience<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>work<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 克隆工作经历</span>
        <span class="token keyword">return</span> cloned<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 工作经历</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WorkExperience</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICloneable</span></span>    <span class="token comment">// 让“工作经历”实现 ICloneable 接口</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">String</span> WorkDate <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">String</span> Company <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 让“工作经历”类实现克隆方法</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">MemberwiseClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主程序调用：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Resume</span> resume <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Resume</span><span class="token punctuation">(</span><span class="token string">&quot;Jack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        resume<span class="token punctuation">.</span><span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token string">&quot;2012-2015&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;XX公司&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Resume</span> cloned <span class="token operator">=</span> <span class="token punctuation">(</span>Resume<span class="token punctuation">)</span>resume<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cloned<span class="token punctuation">.</span><span class="token function">SetWorkExperience</span><span class="token punctuation">(</span><span class="token string">&quot;2015-2018&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;YY公司&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        resume<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cloned<span class="token punctuation">.</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序运行结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Jack worked in XX公司 from 2012-2015
Jack worked in YY公司 from 2015-2018
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="原型模式的应用" tabindex="-1"><a class="header-anchor" href="#原型模式的应用" aria-hidden="true">#</a> 原型模式的应用</h2><h3 id="javascript-继承机制——原型链" tabindex="-1"><a class="header-anchor" href="#javascript-继承机制——原型链" aria-hidden="true">#</a> JavaScript 继承机制——原型链</h3>`,24),I={href:"http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html",target:"_blank",rel:"noopener noreferrer"},W=a('<figure><img src="'+w+`" alt="JavaScript继承机制——原型链" tabindex="0"><figcaption>JavaScript继承机制——原型链</figcaption></figure><p>JavaScript 的创始人 <code>Brendan Eich</code> 在开发 JavaScript 这个使得浏览器可以与网页互动的脚本易语言时，正是面向对象编程（object-oriented programming）最兴盛的时期，C++ 是当时最流行的语言，而 Java 语言的1.0版即将于第二年推出，Sun公司正在大肆造势。</p><p><code>Brendan Eich</code> 无疑受到了影响，Javascript 里面所有的数据类型都是对象（object），这一点与 Java 非常相似。但是，他随即就遇到了一个难题，到底要不要设计&quot;继承&quot;机制呢？如果真的是一种简易的脚本语言，其实不需要有&quot;继承&quot;机制。但是，Javascript 里面都是对象，必须有一种机制，将所有对象联系起来。所以，<code>Brendan Eich</code> 最后还是设计了&quot;继承&quot;。但是，他不打算引入&quot;类&quot;（class）的概念，因为一旦有了&quot;类&quot;，Javascript 就是一种完整的面向对象编程语言了，这好像有点太正式了，而且增加了初学者的入门难度。他考虑到，C++ 和 Java 语言都使用 new 命令，生成实例。因此，他就把new命令引入了 Javascript，用来从原型对象生成一个实例对象。但是，Javascript 没有&quot;类&quot;，怎么来表示原型对象呢？</p><p>这时，他想到 C++ 和 Java 使用 new 命令时，都会调用&quot;类&quot;的构造函数（constructor）。他就做了一个简化的设计，在 Javascript 语言中，new 命令后面跟的不是类，而是构造函数。</p><p>举例来说，现在有一个叫做 Dog 的构造函数，表示狗对象的原型。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对这个构造函数使用 new，就会生成一个 Dog 对象的实例。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> dogA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&#39;大毛&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>dogA<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 大毛</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意构造函数中的 this 关键字，它就代表了新创建的实例对象。</p><p>但是用构造函数生成实例对象，有一个缺点，那就是无法共享属性和方法。比如，在 Dog 对象的构造函数中，设置一个实例对象的共有属性 species。然后，生成两个实例对象：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
　　<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
　　<span class="token keyword">this</span><span class="token punctuation">.</span>species <span class="token operator">=</span> <span class="token string">&#39;犬科&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> dogA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&#39;大毛&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> dogB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&#39;二毛&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两个对象的 species 属性是独立的，修改其中一个，不会影响到另一个。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>dogA<span class="token punctuation">.</span>species <span class="token operator">=</span> <span class="token string">&#39;猫科&#39;</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>dogB<span class="token punctuation">.</span>species<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 显示&quot;犬科&quot;，不受dogA的影响</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>考虑到这一点，<code>Brendan Eich</code> 决定为构造函数设置一个 prototype 属性。</p><p>这个属性包含一个对象（以下简称&quot;prototype 对象&quot;），所有实例对象需要共享的属性和方法，都放在这个对象里面；那些不需要共享的属性和方法，就放在构造函数里面。</p><p>实例对象一旦创建，将自动引用 prototype 对象的属性和方法。也就是说，实例对象的属性和方法，分成两种，一种是本地的，另一种是引用的。</p><p>还是以 Dog 构造函数为例，现在用 prototype 属性进行改写：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
　　<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">species</span> <span class="token operator">:</span> <span class="token string">&#39;犬科&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> dogA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&#39;大毛&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> dogB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&#39;二毛&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span>dogA<span class="token punctuation">.</span>species<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 犬科</span>
<span class="token function">alert</span><span class="token punctuation">(</span>dogB<span class="token punctuation">.</span>species<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 犬科</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，species 属性放在 prototype 对象里，是两个实例对象共享的。只要修改了 prototype 对象，就会同时影响到两个实例对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>species <span class="token operator">=</span> <span class="token string">&#39;猫科&#39;</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span>dogA<span class="token punctuation">.</span>species<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 猫科</span>
<span class="token function">alert</span><span class="token punctuation">(</span>dogB<span class="token punctuation">.</span>species<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 猫科</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据模型缓存" tabindex="-1"><a class="header-anchor" href="#数据模型缓存" aria-hidden="true">#</a> 数据模型缓存</h3><figure><img src="`+h+'" alt="数据模型缓存" tabindex="0"><figcaption>数据模型缓存</figcaption></figure><p>实现示例：创建一个抽象类 CloneableModel，并让类 User、Product 来扩展它；然后定义 ModelCache 类，该类把 CloneableModel 对象存储在 HashTable 中，并在请求的时候返回对应类型的克隆对象。</p><figure><img src="'+f+`" alt="数据模型缓存" tabindex="0"><figcaption>数据模型缓存</figcaption></figure><p>CloneableModel类定义及扩展：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>

<span class="token comment">// 可克隆模型</span>
<span class="token comment">// 实现 ICloneable 接口</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CloneableModel</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICloneable</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">MemberWiseClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 用户</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">CloneableModel</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 商品</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">CloneableModel</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Price <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ModelICache类定义：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModelCache</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token class-name">Hashtable</span> modelMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 将模型类对象存储到 Hashtable 中</span>
    <span class="token comment">// 实际开发中，模型对象从数据库中取出</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">User</span> <span class="token punctuation">{</span> 
            Id <span class="token operator">=</span> <span class="token string">&quot;#1001&quot;</span><span class="token punctuation">,</span> 
            Name <span class="token operator">=</span> <span class="token string">&quot;John Doe&quot;</span> 
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        modelMap<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Product</span> <span class="token punctuation">{</span> 
            Id <span class="token operator">=</span> <span class="token string">&quot;#2001&quot;</span><span class="token punctuation">,</span> 
            Name <span class="token operator">=</span> <span class="token string">&quot;Illustrated C# 2012&quot;</span><span class="token punctuation">,</span> 
            Price <span class="token operator">=</span> <span class="token string">&quot;￥89.00&quot;</span> 
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        modelMap<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>product<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> product<span class="token punctuation">)</span><span class="token punctuation">;</span>

        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Db Models Cache loading ... Down!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">GetModel</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> id<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
    <span class="token punctuation">{</span>
        <span class="token class-name">CloneableModel</span> cache <span class="token operator">=</span> <span class="token punctuation">(</span>CloneableModel<span class="token punctuation">)</span>modelMap<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> cache <span class="token operator">!=</span> <span class="token keyword">null</span>
            <span class="token punctuation">?</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>cache<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 从 cache 中克隆 model</span>
            <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主程序调用：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ModelCache<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">User</span> userCloned <span class="token operator">=</span> ModelCache<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetModel</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;#1001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Product</span> productCloned <span class="token operator">=</span> ModelCache<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetModel</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Product<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;#2001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>userCloned <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> productCloned <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>

        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>
            <span class="token interpolation-string"><span class="token string">$&quot;ID: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"> userCloned<span class="token punctuation">.</span>Id </span><span class="token punctuation">}</span></span><span class="token string"> Name: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"> userCloned<span class="token punctuation">.</span>Name </span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>
            <span class="token interpolation-string"><span class="token string">$&quot;ID: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"> productCloned<span class="token punctuation">.</span>Id </span><span class="token punctuation">}</span></span><span class="token string"> Name: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"> productCloned<span class="token punctuation">.</span>Name </span><span class="token punctuation">}</span></span><span class="token string"> Price: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"> productCloned<span class="token punctuation">.</span>Price </span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序运行结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Db Models Cache Loading ... Down!
ID: #1001 Name: John Doe
ID: #2001 Name: Illustrated C# 2012 Price: ￥89.00
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模式总结" tabindex="-1"><a class="header-anchor" href="#模式总结" aria-hidden="true">#</a> 模式总结</h2><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h3><ul><li>隐藏了对象的创建细节，对有些初始化需要占用很多资源的类来说，对性能也有很大提高。</li><li>在需要新对象时，可以使用Clone来快速创建创建一个，而不用使用new来构建。</li></ul><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h3><ul><li>每一个类都需要一个Clone方法，而且必须通盘考虑。对于深拷贝来说，每个关联到的类型都不许实现ICloneable接口，并且每增加或修改一个字段是都需要更新Clone方法。</li></ul><h3 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景" aria-hidden="true">#</a> 适用场景</h3><ul><li>资源优化场景：类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等。</li><li>性能和安全要求的场景：通过new产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。</li><li>一个对象多个修改者的场景：一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用。</li></ul>`,39);function S(E,J){const e=o("ExternalLinkIcon");return c(),l("div",null,[C,q,_,i(" more "),D,n("ul",null,[P,n("li",null,[s("MemberwiseClone() 方法是浅拷贝（"),n("a",M,[s("微软关于 MemberwiseClone() 的介绍"),p(e)]),s("）")])]),j,n("p",null,[s("参考文章："),n("a",I,[s("阮一峰《Javascript 继承机制的设计思想》"),p(e)])]),W])}const L=t(x,[["render",S],["__file","prototype-pattern.html.vue"]]);export{L as default};
