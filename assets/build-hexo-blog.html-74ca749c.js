import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as t,c as o,a as c,d as e,f as a,b as n,e as i}from"./app-1ddc1ab5.js";const h="/vuepress-blog/assets/b1-58bbeb93.png",u="/vuepress-blog/assets/b2-70c3f7b7.jpg",p="/vuepress-blog/assets/b3-2a75c66a.jpg",b="/vuepress-blog/assets/b4-e26ad220.png",d="/vuepress-blog/assets/b5-19931929.png",g="/vuepress-blog/assets/b8-43721706.png",m={},v=e("p",null,"想搭建一个属于自己的博客网站，用来发布一些文章以及交流学习。发现利用hexo来搭建个人博客挺方便的，于是便自己试着搭建了一个。特写下此文，一防忘记，二供大家参考。",-1),x=i('<h2 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤" aria-hidden="true">#</a> 步骤</h2><ol><li>安装Git</li><li>安装NodeJs</li><li>安装hexo</li><li>生成SSH并添加到github</li><li>部署项目</li><li>上传到github</li><li>绑定个人域名</li><li>修改及配置主题</li><li>添加RSS</li><li>添加评论</li><li>写博客文章</li><li>站点管理文件</li></ol><h2 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作" aria-hidden="true">#</a> 准备工作</h2><h3 id="安装git" tabindex="-1"><a class="header-anchor" href="#安装git" aria-hidden="true">#</a> 安装Git</h3>',4),f={href:"https://gitforwindows.org/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.w3cschool.cn/git/git-install-setup.html",target:"_blank",rel:"noopener noreferrer"},k=e("h3",{id:"安装nodejs",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#安装nodejs","aria-hidden":"true"},"#"),a(" 安装NodeJs")],-1),$=e("p",null,"Hexo是基于Node.js环境的静态博客，里面的npm工具很有用啊，所以还是老老实实把这玩意儿装了吧！",-1),w=e("p",null,"安装步骤：反正下载好msi文件后，双击打开安装，也是一路next，不过在Custom Setup这一步记得选 Add to PATH ,这样你就不用自己去配置电脑上环境变量了，装完在按 win + r 快捷键调出运行，然后输入cmd确定，在cmd中输入path可以看到你的node是否配置在里面（环境变量），没有的话你就自由发挥吧！",-1),y={href:"https://nodejs.org/en/",target:"_blank",rel:"noopener noreferrer"},N={href:"https://www.w3cschool.cn/nodejs/nodejs-install-setup.html",target:"_blank",rel:"noopener noreferrer"},S=i(`<h3 id="安装hexo" tabindex="-1"><a class="header-anchor" href="#安装hexo" aria-hidden="true">#</a> 安装hexo</h3><p>先创建一个文件夹（用来存放所有blog的东西），然后cd到该文件夹下。</p><p>安装hexo命令：（在新建的文件夹里右键Git Bash Here）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> i <span class="token parameter variable">-g</span> hexo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着初始化命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ hexo init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>初始化完成之后打开所在的文件夹可以看到以下文件：</p><figure><img src="`+h+'" alt="生成的文件" tabindex="0"><figcaption>生成的文件</figcaption></figure><p>解释一下：</p><ul><li>node_modules：是依赖包</li><li>public：存放的是生成的页面</li><li>scaffolds：命令生成文章等的模板</li><li>source：用命令创建的各种文章</li><li>themes：主题</li><li>_config.yml：整个博客的配置</li><li>db.json：source解析所得到的</li><li>package.json：项目所需模块项目的配置信息</li></ul><p>做好这些前置工作之后接下来的就是各种配置了。</p><h2 id="配置工作" tabindex="-1"><a class="header-anchor" href="#配置工作" aria-hidden="true">#</a> 配置工作</h2><h3 id="生成ssh并添加到github" tabindex="-1"><a class="header-anchor" href="#生成ssh并添加到github" aria-hidden="true">#</a> 生成SSH并添加到github</h3>',13),j={href:"https://github.com",target:"_blank",rel:"noopener noreferrer"},G=i('<p>创建一个repo，名称为YourName.github.io, 其中YourName是你的github名称，按照这个规则创建才有用，如下：</p><figure><img src="'+u+'" alt="创建仓库" tabindex="0"><figcaption>创建仓库</figcaption></figure><figure><img src="'+p+`" alt="为仓库取名" tabindex="0"><figcaption>为仓库取名</figcaption></figure><p>回到git bash中，配置github账户信息（YourName和YourEmail都替换成你自己的）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> config global user.name <span class="token string">&quot;YourName&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> config global user.email <span class="token string">&quot;YourEmail&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置ssh，Git bash中输入命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">&quot;youremail@example.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一路回车，就能在你的电脑中产生ssh，ssh文件默认在:C:User/Administrator/.ssh文件夹下，打开.ssh文件夹下的id_rsa.pub文件，将里面的内容复制；再打开github的setting：</p><figure><img src="`+b+'" alt="打开setting" tabindex="0"><figcaption>打开setting</figcaption></figure><p>将.ssh文件夹下的id_rsa.pub文件里一经复制好了的内容添加到ssh keys:</p><figure><img src="'+d+`" alt="创建key" tabindex="0"><figcaption>创建key</figcaption></figure><p>添加一个 New SSH key ，title随便取，key就填刚刚复制好了的那一段。</p><p>在Git bash中验证是否添加成功：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>完成下一步你就成功了！</p><h3 id="部署项目" tabindex="-1"><a class="header-anchor" href="#部署项目" aria-hidden="true">#</a> 部署项目</h3><p>用编辑器打开你的blog项目，修改_config.yml文件的一些配置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>deploy:
    type: <span class="token function">git</span>
    repo: https://github.com/yourgithubname/yourgithubname.github.io.git
    branch: master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Git bash中，依次输入以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ hexo clean
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ hexo g
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ hexo s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注：hexo 3.0把服务器独立成个别模块，需要单独安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> i hexo-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>打开浏览器输入：http://localhost:4000</p><p>你就可以看到你的项目在本地能够预览了。</p><h3 id="部署到github上" tabindex="-1"><a class="header-anchor" href="#部署到github上" aria-hidden="true">#</a> 部署到github上</h3><p>先安装一波，这样才能将你写好的文章部署到github服务器上并让别人浏览到,输入命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再依次执行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ hexo clean
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ hexo g
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ hexo d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意deploy的过程中(即hexo d)可能要输入你的github上的userName及password</p><p>一切都ok之后，在浏览器中输入<a href="#">http://yourgithubname.github.io</a>就可以看到你的个人博客，飞起来！！！</p><h3 id="绑定个人域名" tabindex="-1"><a class="header-anchor" href="#绑定个人域名" aria-hidden="true">#</a> 绑定个人域名</h3><p>虽然，使用<a href="#">http://yourgithubname.github.io</a>也可以让别人看到你写的博客。</p><p>但是，写博客写博客，还是要有点装逼的嘛。搭配一个属于自己的域名显然会让自己的博客变得高大上起来。</p><p>可以去各大域名销售平台买自己喜欢的域名。（不想绑定的可以跳过这一个环节直接看下一节）</p><p>第一步购买域名：随便在哪个网站买一个就行；</p><p>第二步添加CNAME：在项目的source文件夹下新建一个名为CNAME的文件，在里面添加你购买的域名：</p><figure><img src="`+d+'" alt="配置域名" tabindex="0"><figcaption>配置域名</figcaption></figure><p>其中ip地址为你的github的地址，可在cmd中ping一下就能看到(ping yourName.github.io)：</p><figure><img src="'+d+'" alt="ping" tabindex="0"><figcaption>ping</figcaption></figure><p>接着再次部署（hexo d）一下，用你购买的域名打开，就可以看到你的博客了了了了了！！！</p><h3 id="修改及配置主题" tabindex="-1"><a class="header-anchor" href="#修改及配置主题" aria-hidden="true">#</a> 修改及配置主题</h3>',47),C={href:"https://hexo.io/themes/",target:"_blank",rel:"noopener noreferrer"},E=i(`<h3 id="添加rss" tabindex="-1"><a class="header-anchor" href="#添加rss" aria-hidden="true">#</a> 添加RSS</h3><p>先安装rss相关插件，Git bash命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> i hexo-generator-feed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在你的项目的_config.yml配置文件下找到Extensions添加如下内容：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## Extensions  #插件和主题</span>
<span class="token comment">### Plugins: https://hexo.io/plugins/</span>
<span class="token comment">### Themes: https://hexo.io/themes/</span>
<span class="token comment">## RSS订阅</span>
plugin:
- hexo-generator-feed
<span class="token comment">#Feed Atom</span>
feed:
  type: atom
  path: atom.xml
  limit: <span class="token number">20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进入到你的主题的配置文件下，找到你的放rss的位置，添加/atom.xml即可。重新部署再打开就能看到效果了。</p><h3 id="添加评论" tabindex="-1"><a class="header-anchor" href="#添加评论" aria-hidden="true">#</a> 添加评论</h3><p>评论功能为第三方评论系统，但，多说、网易云跟帖等都已关闭服务。来必力等也能用，所以，骚年，翻墙吧，具体做法，聪明的你肯定是知道百度的。</p><h3 id="写博客文章" tabindex="-1"><a class="header-anchor" href="#写博客文章" aria-hidden="true">#</a> 写博客文章</h3><p>新建文章，输入命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ hexo new <span class="token string">&#39;文章名&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后你就可以在source/_posts路径下看到你创建的文章，编辑完成之后按照前面说的方式部署，在浏览器刷新就能看到你的文章了。</p>`,12),q={href:"https://www.appinn.com/markdown/index.html",target:"_blank",rel:"noopener noreferrer"},H=i(`<h3 id="站点管理文件" tabindex="-1"><a class="header-anchor" href="#站点管理文件" aria-hidden="true">#</a> 站点管理文件</h3><p>如果本地站点文件丢失了或换了电脑怎么办？为解决这个问题，我们利用了Github的多分支来管理站点文件：</p><ol><li>用master分支来管理发布的文件，即public文件夹下的文件；</li><li>用hexo分支来管理主站点文件，即除public下和.gitignore忽视的其他文件；</li><li>将hexo设为默认分支。</li></ol><p>为此，我们要：</p><h4 id="建立远程仓库" tabindex="-1"><a class="header-anchor" href="#建立远程仓库" aria-hidden="true">#</a> 建立远程仓库</h4><p>先将远程仓库关联到本地。进入站点文件夹，输入命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:username/username.github.io.git <span class="token comment">#使用站点仓库地址关联</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> pull
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="创建hexo分支" tabindex="-1"><a class="header-anchor" href="#创建hexo分支" aria-hidden="true">#</a> 创建hexo分支</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> hexo  <span class="token comment">#创建并切换到hexo分支</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="将hexo设为默认分支" tabindex="-1"><a class="header-anchor" href="#将hexo设为默认分支" aria-hidden="true">#</a> 将hexo设为默认分支</h4><p>在Github上的站点仓库上，点击Settings=&gt;Branches，将Default branch切换成hexo，然后点击Update即可。</p><figure><img src="`+g+`" alt="修改分支" tabindex="0"><figcaption>修改分支</figcaption></figure><h4 id="将主站点文件push到hexo分支" tabindex="-1"><a class="header-anchor" href="#将主站点文件push到hexo分支" aria-hidden="true">#</a> 将主站点文件push到hexo分支</h4><p>在hexo分支（使用git branch命令查看当前所在分支）下，输入命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;提交记录&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> push <span class="token parameter variable">-u</span> origin hexo  <span class="token comment">#初次push要加-u，此后可省</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="本地站点恢复" tabindex="-1"><a class="header-anchor" href="#本地站点恢复" aria-hidden="true">#</a> 本地站点恢复</h4><ol><li>使用git clone命令克隆站点仓库（默认分支为hexo）：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> clone git@github.com:username/username.github.io.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>在本地新拷贝的username.github.io文件夹下依次执行命令：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> hexo-cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意，此时不需要执行hexo init这条命令。</p><p>到此，便完成了对站点的一些简单管理。</p>`,27);function A(B,Y){const s=r("ExternalLinkIcon");return t(),o("div",null,[v,c(" more "),x,e("ul",null,[e("li",null,[a("Git:"),e("a",f,[a("下载地址"),n(s)])]),e("li",null,[a("参考文章:"),e("a",_,[a("《W3C school上Git教程之Git安装配置》"),n(s)])])]),k,$,w,e("ul",null,[e("li",null,[a("NodeJs"),e("a",y,[a("下载地址"),n(s)]),a("(说明：LTS为长期支持版，Current为当前最新版)")]),e("li",null,[a("参考文章:"),e("a",N,[a("《W3C school上Node.js教程之Node.js安装配置》"),n(s)])])]),S,e("p",null,[a("没账号的先创建一个github账号，有账号的看下面。"),e("a",j,[a("注册传送门"),n(s)])]),G,e("p",null,[a("hexo初始化之后默认的主题是landscape , 然后你可以去"),e("a",C,[a("这个地址"),n(s)]),a("里面找到你想要的主题。在github中搜索你要的主题名称，里面都会有该主题的如何使用的介绍，按着来就好了。。")]),E,e("p",null,[a("博客文章采用markdown格式编写，至于markdown，骚年，学习吧！！！-->"),e("a",q,[a("前往教室"),n(s)])]),H])}const J=l(m,[["render",A],["__file","build-hexo-blog.html.vue"]]);export{J as default};
