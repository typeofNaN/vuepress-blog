import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as t,d as e,e as p}from"./app-a5aaa6db.js";const o={},c=e("p",null,"本文分析一下前端计时器为什么会存在误差。",-1),i=p(`<h2 id="_1-前端倒计时为何不准" tabindex="-1"><a class="header-anchor" href="#_1-前端倒计时为何不准" aria-hidden="true">#</a> 1. 前端倒计时为何不准</h2><h3 id="_1-1-javascript的-单线程陷阱" tabindex="-1"><a class="header-anchor" href="#_1-1-javascript的-单线程陷阱" aria-hidden="true">#</a> 1.1 JavaScript的“单线程陷阱”</h3><p>JavaScript是单线程语言，所有任务（包括定时器回调）都在同一个线程中排队执行。当主线程被耗时任务（如复杂计算、网络请求）阻塞时，定时器回调只能“望队兴叹”，导致实际执行时间远晚于预期时间。就像一家只有一个收银台的超市，即使定时器提醒“该收银了”，但前面排队的顾客（同步任务）太多，收银员（主线程）根本腾不出手。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 模拟主线程阻塞</span>
<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>

<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">理论执行时间: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>count<span class="token operator">++</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">秒</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token comment">// 阻塞主线程1.5秒</span>
  <span class="token keyword">const</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start <span class="token operator">&lt;</span> <span class="token number">1500</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：每次回调实际间隔2.5秒，误差高达150%！</p><h3 id="_1-2-浏览器的-节能模式" tabindex="-1"><a class="header-anchor" href="#_1-2-浏览器的-节能模式" aria-hidden="true">#</a> 1.2 浏览器的“节能模式”</h3><p>当页面处于后台或设备锁屏时，浏览器会降低定时器执行频率（如Chrome将间隔延长至1秒以上），甚至暂停定时器以节省资源。这就像让倒计时在用户看不见时“偷懒睡觉”，导致重新激活页面时时间已大幅偏差。</p><h3 id="_1-3-设备时间的-人为干扰" tabindex="-1"><a class="header-anchor" href="#_1-3-设备时间的-人为干扰" aria-hidden="true">#</a> 1.3 设备时间的“人为干扰”</h3><p>用户可能手动修改设备时间，或设备未开启网络时间同步，导致本地时间与真实时间存在偏差。此时，基于Date.now()的倒计时会完全失去参考价值。</p><h2 id="_2-六大精准计时方案" tabindex="-1"><a class="header-anchor" href="#_2-六大精准计时方案" aria-hidden="true">#</a> 2. 六大精准计时方案</h2><h3 id="_2-1-动态修正的递归settimeout" tabindex="-1"><a class="header-anchor" href="#_2-1-动态修正的递归settimeout" aria-hidden="true">#</a> 2.1 动态修正的递归setTimeout</h3><p>核心思想：每次执行回调时，计算实际偏差（offset），动态调整下一次定时器的间隔时间。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">preciseCountdown</span><span class="token punctuation">(</span><span class="token parameter">duration</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> startTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> expected <span class="token operator">=</span> duration

  <span class="token keyword">function</span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> elapsed <span class="token operator">=</span> now <span class="token operator">-</span> startTime
    <span class="token keyword">const</span> remaining <span class="token operator">=</span> duration <span class="token operator">-</span> elapsed

    <span class="token keyword">if</span> <span class="token punctuation">(</span>remaining <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;倒计时结束&quot;</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 计算偏差并调整下一次执行时间</span>
    <span class="token keyword">const</span> drift <span class="token operator">=</span> elapsed <span class="token operator">-</span> expected
    expected <span class="token operator">+=</span> <span class="token number">1000</span>
    <span class="token keyword">const</span> nextInterval <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">-</span> drift

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">剩余时间: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>remaining<span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">秒，偏差: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>drift<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span>step<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> nextInterval<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">setTimeout</span><span class="token punctuation">(</span>step<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：误差可控制在±50ms以内，适用于对精度要求较高的短时倒计时。</p><h3 id="_2-2-服务端时间校准" tabindex="-1"><a class="header-anchor" href="#_2-2-服务端时间校准" aria-hidden="true">#</a> 2.2 服务端时间校准</h3><p>实现步骤：</p><ol><li><code>初始化校准</code>：页面加载时请求接口获取服务端当前时间serverTime；</li><li><code>计算时间差</code>：记录客户端当前时间clientTime，计算差值delta = serverTime - clientTime；</li><li><code>动态修正</code>：每次倒计时计算时，使用Date.now() + delta作为“真实时间”。</li></ol><h3 id="_2-3-页面可见性监听" tabindex="-1"><a class="header-anchor" href="#_2-3-页面可见性监听" aria-hidden="true">#</a> 2.3 页面可见性监听</h3><p>通过visibilitychange事件检测页面是否可见，不可见时暂停计时，可见时重新校准时间。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;visibilitychange&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>hidden<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 记录暂停时间点</span>
    pauseTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 计算暂停期间流逝的时间并补偿</span>
    <span class="token keyword">const</span> resumeTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    elapsed <span class="token operator">+=</span> resumeTime <span class="token operator">-</span> pauseTime
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-web-worker-逃离主线程-堵车" tabindex="-1"><a class="header-anchor" href="#_2-4-web-worker-逃离主线程-堵车" aria-hidden="true">#</a> 2.4 Web Worker：逃离主线程“堵车”</h3><p>将倒计时逻辑放在Web Worker线程中执行，避免主线程阻塞导致的误差。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> timer
self<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">.</span>command <span class="token operator">===</span> <span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> duration <span class="token operator">=</span> e<span class="token punctuation">.</span>data<span class="token punctuation">.</span>duration
    <span class="token keyword">const</span> startTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">function</span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> elapsed <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime
      <span class="token keyword">const</span> remaining <span class="token operator">=</span> duration <span class="token operator">-</span> elapsed

      <span class="token keyword">if</span> <span class="token punctuation">(</span>remaining <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        self<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&#39;finished&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
      <span class="token punctuation">}</span>

      self<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> remaining <span class="token punctuation">}</span><span class="token punctuation">)</span>
      timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>step<span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">-</span> <span class="token punctuation">(</span>elapsed <span class="token operator">%</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">.</span>command <span class="token operator">===</span> <span class="token string">&#39;stop&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-高精度时间api-performance-now" tabindex="-1"><a class="header-anchor" href="#_2-5-高精度时间api-performance-now" aria-hidden="true">#</a> 2.5 高精度时间API：performance.now()</h3><p>相比Date.now()，performance.now()提供微秒级精度且不受系统时间调整影响。</p><p>优势对比：</p><table><thead><tr><th>指标</th><th>Date.now()</th><th>performance.now()</th></tr></thead><tbody><tr><td>精度</td><td>毫秒级</td><td>微秒级（最高5μs）</td></tr><tr><td>受系统时间影响</td><td>是</td><td>否</td></tr><tr><td>参考起点</td><td>1970年1月1日</td><td>页面加载起始时刻</td></tr></tbody></table><h3 id="_2-6-css动画辅助-视觉与逻辑分离" tabindex="-1"><a class="header-anchor" href="#_2-6-css动画辅助-视觉与逻辑分离" aria-hidden="true">#</a> 2.6 CSS动画辅助：视觉与逻辑分离</h3><p>利用CSS动画的硬件加速特性渲染倒计时，JavaScript仅负责逻辑校准。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.countdown</span> <span class="token punctuation">{</span>
  <span class="token property">animation</span><span class="token punctuation">:</span> countdown 10s linear<span class="token punctuation">;</span>
  <span class="token property">animation-play-state</span><span class="token punctuation">:</span> running<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token atrule"><span class="token rule">@keyframes</span> countdown</span> <span class="token punctuation">{</span>
  <span class="token selector">from</span> <span class="token punctuation">{</span> <span class="token property">--progress</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token selector">to</span> <span class="token punctuation">{</span> <span class="token property">--progress</span><span class="token punctuation">:</span> 0%<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 监听动画每一帧</span>
element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;animationiteration&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">updateDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-构建高精度倒计时的最佳实践" tabindex="-1"><a class="header-anchor" href="#_3-构建高精度倒计时的最佳实践" aria-hidden="true">#</a> 3. 构建高精度倒计时的最佳实践</h2><h3 id="_3-1-复合型校准策略" tabindex="-1"><a class="header-anchor" href="#_3-1-复合型校准策略" aria-hidden="true">#</a> 3.1 复合型校准策略</h3><ul><li><code>短时倒计时</code>：动态setTimeout修正 + performance.now()</li><li><code>长时倒计时</code>：服务端时间校准 + 页面可见性监听</li><li><code>超高精度场景</code>：Web Worker + CSS动画</li></ul><h3 id="_3-2-误差监控与告警" tabindex="-1"><a class="header-anchor" href="#_3-2-误差监控与告警" aria-hidden="true">#</a> 3.2 误差监控与告警</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 记录每次偏差用于分析</span>
<span class="token keyword">const</span> driftHistory <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">function</span> <span class="token function">logDrift</span><span class="token punctuation">(</span><span class="token parameter">drift</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  driftHistory<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>drift<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>drift <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;过大偏差警告:&#39;</span><span class="token punctuation">,</span> drift<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-用户体验优化" tabindex="-1"><a class="header-anchor" href="#_3-3-用户体验优化" aria-hidden="true">#</a> 3.3 用户体验优化</h3><ul><li><code>倒计时结束前预加载数据</code>：避免结束时集中请求导致服务端压力。</li><li><code>显示毫秒数</code>：通过requestAnimationFrame实现流畅渲染：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">updateMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> ms <span class="token operator">=</span> remaining <span class="token operator">%</span> <span class="token number">1000</span>
  element<span class="token punctuation">.</span>textContent <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span>
  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>updateMilliseconds<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-误差产生原因以及解决方案总结" tabindex="-1"><a class="header-anchor" href="#_4-误差产生原因以及解决方案总结" aria-hidden="true">#</a> 4. 误差产生原因以及解决方案总结</h2><ol><li><p>定时器延迟</p><ul><li><code>原因</code>：setTimeout 和 setInterval 受主线程阻塞的影响，导致执行时机可能会有延迟。</li><li><code>解决方案</code>：使用 requestAnimationFrame 替代 setInterval 或 setTimeout，尤其是需要精确渲染的场景。或者使用 Web Workers 来在后台执行任务，不受主线程阻塞。</li></ul></li><li><p>JavaScript 单线程问题</p><ul><li><code>原因</code>：JavaScript 在单线程中执行，多个任务排队可能导致定时器执行延迟。</li><li><code>解决方案</code>：尽量减少主线程的任务量，将耗时的操作（如计算密集型任务）转移到 Web Workers，或者优化现有的 JavaScript 代码，使任务处理更加高效。</li></ul></li><li><p>设备与系统时钟差异</p><ul><li><code>原因</code>：设备端的倒计时依赖操作系统时钟，操作系统时钟更新频率高于浏览器中的定时器，且直接读取系统时间，因此误差较小。</li><li><code>解决方案</code>：通过使用更精确的系统时钟来读取时间，或者使用 performance.now() 获取高精度时间。对于长时间运行的应用，定期同步时钟以减小误差。</li></ul></li><li><p>浏览器渲染与执行周期</p><ul><li><code>原因</code>：浏览器在渲染页面时经过多个步骤，包括 DOM 构建、布局计算和渲染层绘制，导致倒计时更新与渲染周期不完全同步。</li><li><code>解决方案</code>：将定时器与浏览器的渲染周期结合，使用 requestAnimationFrame 来确保倒计时更新与页面渲染同步。此外，尽量避免阻塞渲染的操作，提高页面渲染的流畅性。</li></ul></li></ol>`,41);function l(u,r){return s(),a("div",null,[c,t(" more "),i])}const v=n(o,[["render",l],["__file","timer.html.vue"]]);export{v as default};
